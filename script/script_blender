import bpy
import math
import random
from enum import Enum
from mathutils import Vector

# Parameters - USER ADJUSTABLE VALUES
start_frame = 1
takeoff_frame = 48
end_frame = 1500
altitude = 5
rotation_speed = 3600
drone_speed = 3.0  # Adjustable speed parameter (1.0 = normal speed, 2.0 = 2x speed, etc.)
formation_radius = 10  # Radius of the formation circle
transition_frames = 60  # Formation adjustment duration
fall_duration = 45     # Faster fall (about 0.75 seconds at 60fps)
gravity = 9.8 * 0.1    # Scaled gravity acceleration for Blender units
camera_distance = 30   # Distance from swarm center to camera
camera_height = 15     # Height of camera above swarm center
camera_smoothness = 0.2 # Lower values = smoother camera (0.1-0.3 works well)

# Drone names (7 drones: MainBody.10 to MainBody.70)
drone_names = [f"MainBody.{10 + i * 10}" for i in range(7)]

class FormationType(Enum):
    CIRCLE = "Circle Formation"
    V = "V Formation"
    LINE = "Line Formation"
    SQUARE = "Square Formation"

def calculate_formation_positions(active_drones, formation_center, formation_type=FormationType.CIRCLE, radius=10.0):
    """Calculate new formation positions for active drones."""
    num_drones = len(active_drones)
    formation_positions = {}

    if formation_type == FormationType.CIRCLE:
        for i, drone in enumerate(active_drones):
            angle = 2 * math.pi * i / num_drones  # Equidistant angles
            offset_x = radius * math.cos(angle)
            offset_y = radius * math.sin(angle)
            offset_z = 0
            formation_positions[drone] = formation_center + Vector((offset_x, offset_y, offset_z))
    else:
        # Default to circle formation
        for i, drone in enumerate(active_drones):
            angle = 2 * math.pi * i / num_drones
            offset_x = radius * math.cos(angle)
            offset_y = radius * math.sin(angle)
            offset_z = 0
            formation_positions[drone] = formation_center + Vector((offset_x, offset_y, offset_z))

    return formation_positions

def move_drones_to_formation(drones, target_positions, current_frame, frames_needed=60):
    
    for drone in drones:
        if drone in target_positions:
            target_position = target_positions[drone]
            progress = min(1.0, (current_frame - failure_frame) / frames_needed)
            ease_progress = progress ** 2  # Quadratic easing for more responsive movement
            current_pos = drone.location.lerp(target_position, ease_progress)
            drone.location = current_pos
            drone.keyframe_insert(data_path="location", frame=current_frame)

def setup_camera():
    
    # Create camera if it doesn't exist
    if "SwarmCamera" not in bpy.data.objects:
        bpy.ops.object.camera_add()
        camera = bpy.context.object
        camera.name = "SwarmCamera"
    else:
        camera = bpy.data.objects["SwarmCamera"]
    
    # Set camera properties
    camera.data.lens = 50  # 50mm focal length
    camera.data.clip_end = 1000  # Extend far clip plane
    
    # Position camera initially
    camera.location = (0, -camera_distance, camera_height)
    camera.rotation_euler = (math.radians(60), 0, 0)
    
    # Clear any existing animation
    if camera.animation_data:
        camera.animation_data_clear()
    
    return camera

# Créer un point de suivi pour le centre de formation
def create_formation_center_marker():
    # Vérifier si le point de suivi existe déjà
    if "FormationCenterMarker" not in bpy.data.objects:
        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))  # Créer une sphère pour marquer le centre
        marker = bpy.context.object
        marker.name = "FormationCenterMarker"
    else:
        marker = bpy.data.objects["FormationCenterMarker"]
    
    # Appliquer un matériau ou modifier la couleur du point (facultatif)
    if marker.active_material is None:
        mat = bpy.data.materials.new(name="MarkerMaterial")
        mat.use_nodes = True
        marker.data.materials.append(mat)
    marker.active_material.diffuse_color = (1, 0, 0, 1)  # Couleur rouge pour le point (par exemple)
    
    return marker

# Créer le marqueur pour le centre de la formation
formation_center_marker = create_formation_center_marker()

# Mettre à jour la position du marqueur du centre de formation
def update_formation_center_marker_position(center_position, current_frame):
    formation_center_marker.location = center_position
    formation_center_marker.keyframe_insert(data_path="location", frame=current_frame)

# Find drones and blades
drones = [obj for obj in bpy.data.objects if obj.name in drone_names]
blades = [obj for obj in bpy.data.objects if "Wing" in obj.name]

if not drones:
    raise Exception("No drones found. Make sure you have objects named MainBody.10 through MainBody.70")

# Set up tracking camera
camera = setup_camera()
previous_camera_position = camera.location.copy()

# Torus-shaped waypoints (x, y, z)
waypoints = [
    Vector((0, 0, 5)),    # Torus0
    Vector((0, 40, 0)),   # Torus1
    Vector((-50, 40, 5)), # Torus2
    Vector((-75, 80, 0)), # Torus3
    Vector((-50, 110, 5)),# Torus4
    Vector((40, 110, 5))  # Torus5
]

# Set initial circular formation
formation_center = Vector((0, 0, 0))
formation_positions = calculate_formation_positions(drones, formation_center, FormationType.CIRCLE, formation_radius)
for drone, position in formation_positions.items():
    drone.location = position

# Clear existing animation data
for obj in drones + blades + [camera]:
    if obj.animation_data:
        obj.animation_data_clear()

# Set drone colors to green for active drones initially
for drone in drones:
    if drone.active_material:
        # Set active drone to green
        drone.active_material.diffuse_color = (0, 1, 0, 1)  # Green color for active drones

# Randomly select a drone to fail and a random frame for the failure
drone_panne = random.choice(drones)
failure_frame = random.randint(takeoff_frame + 100, end_frame - fall_duration - 100)
num_panne = drone_panne.name.split(".")[-1]
print(f"Drone to fail: {drone_panne.name} (Number {num_panne}) at frame {failure_frame}")

# Identify blades of the failing drone
blades_panne = [blade for blade in blades if blade.name.endswith(f".{num_panne}")]

# Animate drones
for drone in drones:
    # Initial position
    drone.keyframe_insert(data_path="location", frame=start_frame)

    # Takeoff animation
    drone.location.z = altitude
    drone.keyframe_insert(data_path="location", frame=takeoff_frame)

# Follow waypoints
current_frame = takeoff_frame
active_drones = drones.copy()
formation_changed = False
new_radius = formation_radius
failed_drone_falling = False
fall_velocity = 0
start_fall_position = Vector((0, 0, 0))

for i in range(len(waypoints) - 1):
    start_wp = waypoints[i]
    end_wp = waypoints[i + 1]
    direction = (end_wp - start_wp)
    distance = direction.length
    frames_needed = max(1, int(distance / (0.1 * drone_speed)))  # Use adjustable speed parameter
    direction /= frames_needed  # Normalize direction

    for frame in range(frames_needed):
        current_frame += 1
        
        # Update formation center (average of active drone positions)
        if active_drones:
            formation_center = sum((d.location for d in active_drones), Vector()) / len(active_drones)
        
        # Mettre à jour la position du marqueur
        update_formation_center_marker_position(formation_center, current_frame)
        
        # Update camera position to follow swarm
        if current_frame >= takeoff_frame:
            # Calculate target camera position
            target_position = Vector((
                formation_center.x,
                formation_center.y - camera_distance,
                formation_center.z + camera_height
            ))
            
            # Smooth camera movement
            camera.location = camera.location.lerp(target_position, camera_smoothness)
            camera.rotation_euler = (math.radians(60), 0, 0)  # Maintain fixed angle
            camera.keyframe_insert(data_path="location", frame=current_frame)
            camera.keyframe_insert(data_path="rotation_euler", frame=current_frame)
        
        # Check if it's time for drone failure
        if current_frame == failure_frame and drone_panne in active_drones:
            # Mark drone as failed
            if drone_panne.active_material:
                fail_material = drone_panne.active_material.copy()
                fail_material.diffuse_color = (1, 0, 0, 1)  # Red color for failed drone
                drone_panne.active_material = fail_material
            
            # Remove failed drone from active list
            active_drones.remove(drone_panne)
            formation_changed = True
            failed_drone_falling = True
            start_fall_position = drone_panne.location.copy()
            fall_velocity = 0
            
            # Calculate new formation positions
            new_radius = formation_radius * (len(active_drones) / len(drones))
            target_positions = calculate_formation_positions(
                active_drones, 
                formation_center, 
                FormationType.CIRCLE, 
                new_radius
            )
        
        # Handle failed drone falling with gravity
        if failed_drone_falling and current_frame > failure_frame:
            time_since_fall = (current_frame - failure_frame) / 60.0  # Convert to seconds
            fall_velocity += gravity * (1/60.0)  # Update velocity with gravity
            fall_distance = fall_velocity * time_since_fall + 0.5 * gravity * time_since_fall**2
            
            # Apply falling motion
            drone_panne.location.z = max(0, start_fall_position.z - fall_distance)
            
            # Add slight horizontal drift
            if time_since_fall < 1.0:  # Only drift during first second
                drift_factor = time_since_fall * 0.5
                drone_panne.location.x += math.sin(time_since_fall * 5) * drift_factor
                drone_panne.location.y += math.cos(time_since_fall * 5) * drift_factor
            
            drone_panne.keyframe_insert(data_path="location", frame=current_frame)
            
            # Stop falling when hit ground
            if drone_panne.location.z <= 0:
                failed_drone_falling = False
        
        # Handle swarm movement and formation adjustment
        if formation_changed:
            # Recalculate formation
            formation_center = sum((d.location for d in active_drones), Vector()) / len(active_drones)
            target_positions = calculate_formation_positions(
                active_drones, 
                formation_center, 
                FormationType.CIRCLE, 
                new_radius
            )

            # Move drones to formation and update positions
            move_drones_to_formation(active_drones, target_positions, current_frame, transition_frames)

            # Apply forward movement along the waypoint
            for drone in active_drones:
                drone.location += direction
                drone.keyframe_insert(data_path="location", frame=current_frame)
        else:
            # Normal movement when no failure has occurred
            for drone in active_drones:
                drone.location += direction
                drone.keyframe_insert(data_path="location", frame=current_frame)

# Animate blades
for blade in blades:
    blade.rotation_mode = 'XYZ'
    blade.keyframe_insert(data_path="rotation_euler", frame=start_frame)

    for frame in range(start_frame, end_frame, 10):
        if blade in blades_panne:
            if frame >= failure_frame:
                # Rapid blade slowdown (matches fast fall)
                if frame < failure_frame + 30:  # Stop completely in 0.5 seconds
                    slowdown = 1 - (frame - failure_frame) / 30
                    blade.rotation_euler.z += math.radians(rotation_speed * 10 / 24) * slowdown
                blade.keyframe_insert(data_path="rotation_euler", frame=frame)
            else:
                blade.rotation_euler.z += math.radians(rotation_speed * 10 / 24)
                blade.keyframe_insert(data_path="rotation_euler", frame=frame)
        else:
            blade.rotation_euler.z += math.radians(rotation_speed * 10 / 24)
            blade.keyframe_insert(data_path="rotation_euler", frame=frame)

# Set camera as active for rendering
if bpy.context.scene.camera is None:
    bpy.context.scene.camera = camera

